theme_bw()
ggplot(plc[as.numeric(as.character(plc[, 1])) < 12, ], aes(x = cnt_ooh_plcm)) + geom_bar(binwidth = 1) +
theme_bw() +
labs(x = "Count of OOH Placements (2009 Entry Cohort, Episodes > 7 Days")
poc_colors
?pocr
qf
quickfacts
qf_dict
names(quickfacts)
pc <- quickfacts[, c("AGE295211", "PVY020211")]
h(pc)
h(quickfacts)
pc <- quickfacts[, c("text", "AGE295211", "PVY020211")]
pc
pc <- quickfacts[, c("text", "AGE295211", "PVY020211")]
names(pc) <- c("Location", "Percent of Population Under 18", "Percent of Population Below Poverty Line")
pc
agg_query <- "select count(*) entries
, sum(case when child_age_removal_begin between 0 and 4 then 1 else 0 end) entries_under5
, sum(case when petition_dependency_date is not null then 1 else 0 end) entries_dep
, sum(case when federal_discharge_reason_code = 1 and datediff(d, state_custody_start_date, federal_discharge_date) < 366
then 1 else 0 end) number_reun_1yr
, removal_county
, removal_county_cd
from tbl_child_episodes
where year(state_custody_start_date) between 2009 and 2011
and child_age_removal_begin between 0 and 17
group by removal_county, removal_county_cd
order by removal_county_cd"
agg <- sqlQuery(con, agg_query)
h(agg)
wash <- colSums(agg[, 1:4])
wash
class(agg$removal_county)
agg$removal_county <- as.character(agg$removal_county)
agg <- rbind(agg, cbind(wash, removal_county = "Washington", removal_county_cd, = 0))
cbind(wash, removal_county = "Washington", removal_county_cd, = 0)
class(wash)
as.data.frame(wash)
as.data.frame(t(wash))
wash <- as.data.frame(t(colSums(agg[, 1:4]))
)
wash
wash$removal_county = "Washington"
wash$removal_county_cd = 0
h(agg)
agg <- rbind(agg, wash)
tail(agg)
agg[1, ] <- NULL
h(agg)
agg <- agg[2:nrow(agg), ]
h(agg)
nrow(agg)
nrow(pc)
los_query <- "select case when federal_discharge_date is not null then dur_days else 100000 end as dur
, removal_county
, removal_county_cd
from tbl_child_episodes
where year(state_custody_start_date) between 2009 and 2011
and child_age_removal_begin between 0 and 17
--group by removal_county, removal_county_cd
order by removal_county_cd"
los <- sqlQuery(con, los_query)
h(los)
ddply(los, .removal(county), summarize, med = median(dur))
ddply(los, .(removal_county), summarize, med = median(dur))
med_los <- ddply(los, .(removal_county), summarize, med = median(dur))
med_los$removal_county <- as.character(med_los$removal_county)
median(los$dur)
med_los[med_los$removal_county == "Unknown", 1] <- "Washington"
med_los[med_los$removal_county == "Washington", 2] <- median(los$dur)
med_los
data_plot_TT <- structure(list(Species = structure(c(1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L), .Label = c("Barking treefrog",
"Cricket frog"), class = "factor"), Chemical = structure(c(1L,
1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,
3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 1L, 1L, 1L, 1L, 1L, 5L, 5L, 5L,
5L, 5L), .Label = c("A", "B", "C", "D", "E"), class = "factor"),
logTissueConc = c(-1.10922426, -1.55698525, -0.67977088,
-1.22868756, -0.47476868, -0.89399639, -1.35670286, -2.35421158,
-2.49491771, -2.30921816, 2.06394108, 1.84732292, 1.62127641,
1.7299181, 1.72845824, -0.42136482, -0.03384518, -0.76756916,
-0.77322993, -1.20469607, -1.31449937, -1.52823116, -1.94002471,
-1.29272381, -1.75399776, -3, -0.5, -0.98828589, -1.2, -0.7,
0.73098756, 0.56309363, 0.55666185, 0.3785305, 0.31730552
), HabFac = structure(c(2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,
2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), .Label = c("Aquatic",
"Arboreal"), class = "factor")), .Names = c("Species", "Chemical",
"logTissueConc", "HabFac"), class = "data.frame", row.names = c(NA,
-35L))
h(data_plot_TT)
data_plot_TT
med_los
h(pc)
nrow(pc)
med_los
names(med_los) <- c("Location", "Median Time to Permanency (days)")
med_los$Location <- factor(med_los$Location)
h(agg)
names(agg)[names(agg) == "removal_county"] <- "Location"
agg$Location <- factor(agg$Location)
pc <- merge(pc, med_los)
pc <- merge(pc, agg)
h(pc)
pc
names(pc)
qf_dict
pc <- quickfacts[, c("text", "AGE295211", "PVY020211", "PST045212")]
names(pc) <- c("Location", "Percent of Population Under 18", "Percent of Population Below Poverty Line",
"pop_tot")
pc <- merge(pc, med_los)
pc <- merge(pc, agg)
names(pc)
pc
?round_any
pc$`Annual Entries (per 1,000)` <- pc$entries / 3 / (pc$pop_tot * pc$`Percent of Population Under 18` / 100) * 1000
pc$`Percent of Entries Age 0-4` <- round(pc$entries_under5 / pc$entries * 100)
pc$`Percent of Entries with Dependency` <- round(pc$entries_dep / pc$entries * 100)
pc$`Percent of Entries Ending in Reunification within 1 Year` <- round(pc$number_reun_1yr / pc$entries * 100)
h(pc)
ref_lookup_county
rlc <- ref_lookup_county[, 2:3]
names(rlc) <- c("Location", "Region")
rlc$Location <- as.character(rlc$Location)
rlc$Location[rlc$Location == "All"] <- "Washington"
rlc$Location <- factor(rlc$Location)
rlc
pc <- merge(pc, lrc)
pc <- merge(pc, rlc)
pc <- quickfacts[, c("text", "AGE295211", "PVY020211", "PST045212")]
names(pc) <- c("Location", "Percent of Population Under 18", "Percent of Population Below Poverty Line",
"pop_tot")
pc <- merge(pc, med_los)
pc <- merge(pc, agg)
pc <- merge(pc, rlc)
pc$`Annual Entries (per 1,000)` <- pc$entries / 3 / (pc$pop_tot * pc$`Percent of Population Under 18` / 100) * 1000
pc$`Percent of Entries Age 0-4` <- round(pc$entries_under5 / pc$entries * 100)
pc$`Percent of Entries with Dependency` <- round(pc$entries_dep / pc$entries * 100)
pc$`Percent of Entries Ending in Reunification within 1 Year` <- round(pc$number_reun_1yr / pc$entries * 100)
names(pc)
pc$`Population Under 18` <- round(pc$pop_tot * pc$`Percent of Population Under 18` / 100)
pc_final <- pc[, c("Location", "Region",
"Population Under 18", "Percent of Population Below Poverty Line",
"Annual Entries (per 1,000)", "Percent of Entries Age 0-4",
"Percent of Entries with Dependency",
"Percent of Entries Ending in Reunification within 1 Year",
"Median Time to Permanency (days)")]
pc_final
pc$`Population Under 18` <- round(pc$pop_tot * pc$`Percent of Population Under 18` / 100)
pc$`Annual Entries (per 1,000)` <- round(pc$entries / 3 / (pc$pop_tot * pc$`Percent of Population Under 18` / 100) * 1000, 1)
pc$`Percent of Entries Age 0-4` <- round(pc$entries_under5 / pc$entries * 100, 1)
pc$`Percent of Entries with Dependency` <- round(pc$entries_dep / pc$entries * 100, 1)
pc$`Percent of Entries Ending in Reunification within 1 Year` <- round(pc$number_reun_1yr / pc$entries * 100, 1)
pc_final <- pc[, c("Location", "Region",
"Population Under 18", "Percent of Population Below Poverty Line",
"Annual Entries (per 1,000)", "Percent of Entries Age 0-4",
"Percent of Entries with Dependency",
"Percent of Entries Ending in Reunification within 1 Year",
"Median Time to Permanency (days)")]
pc_final
write.table(pc_final, "S:/Data Portal/new_vis/gloria/par_coord2.tsv", sep = "\t", row.names=FALSE)
sqlDrop(con, sqtable= "parcoords")
odbcCloseAll()
con <- odbcConnect("test_annie")
sqlDrop(con, sqtable= "parcoords")
sqlSave(pc_final, channel = con, tablename= "parcoords", rownames = FALSE)
?sqlSave
sqlDrop(con, sqtable= "parcoords")
sqlSave(pc_final, channel = con, tablename= "parcoords", rownames = FALSE, colnames = FALSE )
?pdf
pc_sql <- pc_final
names(pc_final) <- str_replace_all(names(pc_final), pattern = " ", replacement = "_")
pc_final
names(pc_final)
names(pc_final) <- str_replace_all(names(pc_final), pattern = " ", replacement = "_")
odbcCloseAll()
con <- odbcConnect("test_annie")
sqlDrop(con, sqtable= "parcoords")
sqlSave(pc_final, channel = con, tablename= "parcoords", rownames = FALSE)
pc_final <- pc[, c("Location", "Region",
"Population Under 18", "Percent of Population Below Poverty Line",
"Annual Entries (per 1,000)", "Percent of Entries Age 0-4",
"Percent of Entries with Dependency",
"Percent of Entries Ending in Reunification within 1 Year",
"Median Time to Permanency (days)")]
write.table(pc_final, "S:/Data Portal/new_vis/gloria/par_coord.tsv", sep = "\t", row.names=FALSE)
require(rjson)
toJSON(as.list(pc_final))
?write
?file
js <- file("S:/Data Portal/new_vis/gloria/par_coord.js")
?cat
cat(toJSON(as.list(pc_final)), file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", toJSON(as.list(pc_final)), "]" file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_group.js")
cat('var foodgroups = ["0","1","2","3"]', file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", toJSON(as.list(pc_final)), "]", file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_group.js")
cat('var foodgroups = ["0","1","2","3"]', file = js)
close(js)
lapply(pc_final, class)
pc_final$Region <- factor(pc_final$Region)
lapply(pc_final, class)
sapply(pc_final, class)
class(sapply(pc_final, class))
classes <- sapply(pc_final, class)
classes
?cat
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{", file = js)
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', file = js)   ## "column name":
if(classes[colj] != "numeric") cat('"', file = js) ## non-numeric values need to be quoted
cat(pc_final[, pc_final[rowi, colj], file = js)    ## value
if(classes[colj] != "numeric") cat('"', file = js) ## non-numeric values need to be quoted
if (colj < coln) cat(",", file = js)
}
cat("}", file = js)
if (rowi < rown) cat(",", file = js)
}
cat("];", file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_group.js")
cat('var foodgroups = ["0","1","2","3"];', file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{", file = js)
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', file = js)   ## "column name":
if(classes[colj] != "numeric") cat('"', file = js) ## non-numeric values need to be quoted
cat(pc_final[rowi, colj], file = js)    ## value
if(classes[colj] != "numeric") cat('"', file = js) ## non-numeric values need to be quoted
if (colj < coln) cat(",", file = js)
}
cat("}", file = js)
if (rowi < rown) cat(",", file = js)
}
cat("];", file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_group.js")
cat('var foodgroups = ["0","1","2","3"];', file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{", file = js, append = TRUE)
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', file = js, append = TRUE)   ## "column name":
if(classes[colj] != "numeric") cat('"', file = js, append = TRUE) ## non-numeric values need to be quoted
cat(pc_final[rowi, colj], file = js, append = TRUE)    ## value
if(classes[colj] != "numeric") cat('"', file = js, append = TRUE) ## non-numeric values need to be quoted
if (colj < coln) cat(",", file = js, append = TRUE)
}
cat("}", file = js, append = TRUE)
if (rowi < rown) cat(",", file = js, append = TRUE)
}
cat("];", file = js, append = TRUE)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{", file = js, append = TRUE)
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', file = js, append = TRUE)   ## "column name":
if(classes[colj] != "numeric") cat('"', file = js, append = TRUE) ## non-numeric values need to be quoted
cat(pc_final[rowi, colj], file = js, append = TRUE)    ## value
if(classes[colj] != "numeric") cat('"', file = js, append = TRUE) ## non-numeric values need to be quoted
if (colj < coln) cat(",", file = js, append = TRUE)
}
cat("}", file = js, append = TRUE)
if (rowi < rown) cat(",", file = js, append = TRUE)
}
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
cat("{", file = js, append = TRUE)
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', file = js, append = TRUE)   ## "column name":
if(classes[colj] != "numeric") cat('"', file = js, append = TRUE) ## non-numeric values need to be quoted
cat(pc_final[rowi, colj], file = js, append = TRUE)    ## value
if(classes[colj] != "numeric") cat('"', file = js, append = TRUE) ## non-numeric values need to be quoted
if (colj < coln) cat(",", file = js, append = TRUE)
}
cat("}", file = js, append = TRUE)
if (rowi < rown) cat(",", file = js, append = TRUE)
close(js)
js <- file("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [", file = js)
cat("{", file = js, append = TRUE)
close(js)
cattest <- file("cattest.txt")
cat("First thing", file = cattest)
cat("Second thing", file = cattest, append = TRUE)
close(cattest)
getwd()
sink("cattest_sink.txt")
cat("First thing", file = cattest)
cat("Second thing", file = cattest)
sink()
version()
R.version
cattest <- file("cattest.txt")
cat("First thing", file = cattest)
cat("Second thing", file = cattest, append = TRUE)
close(cattest)
sink("cattest_sink.txt")
cat("First thing")
cat("Second thing")
sink()
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":')   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
sink("S:/Data Portal/new_vis/gloria/par_coord_group.js")
cat('var foodgroups = ["0","1","2","3"];')
sink()
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', sep = "")   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
names(pc_final)[1:2] <- c("name", "group")
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', sep = "")   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
cattest <- file("cattest.txt")
cat("First thing", file = cattest)
cat("Second thing", file = "cattest.txt", append = TRUE)
close(cattest)
?sink
names(pc_final)[4] <- "Percent of Population\nBelow Poverty Line"
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', sep = "")   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
names(pc_final)[4] <- "Percent of Population Below Poverty Line"
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', sep = "")   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
names(pc_final)[1:2] <- c("Location", "Region")
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', sep = "")   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
?toJSON
names(pc_final)[1:2] <- c("name", "group")
sink("S:/Data Portal/new_vis/gloria/par_coord_table.js")
cat("var foods = [")
classes <- sapply(pc_final, class)
rown <- nrow(pc_final)
coln <- ncol(pc_final)
for (rowi in 1:rown) {
cat("{")
for (colj in 1:coln) {
cat('"', names(pc_final)[colj], '":', sep = "")   ## "column name":
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
cat(pc_final[rowi, colj])    ## value
if(classes[colj] != "numeric") cat('"') ## non-numeric values need to be quoted
if (colj < coln) cat(",")
}
cat("}")
if (rowi < rown) cat(",")
}
cat("];")
sink()
names(pc)
names(pc_final)
los_query <- "select case when federal_discharge_date is not null then dur_days else 100000 end as dur
, removal_county
, removal_county_cd
from tbl_child_episodes
where year(state_custody_start_date) between 2009 and 2011
and child_age_removal_begin between 0 and 17
and dur_days > 7
--group by removal_county, removal_county_cd
order by removal_county_cd"
los <- sqlQuery(con, los_query)
med_los <- ddply(los, .(removal_county), summarize, med = median(dur))
med_los$removal_county <- as.character(med_los$removal_county)
med_los[med_los$removal_county == "Unknown", 1] <- "Washington"
med_los[med_los$removal_county == "Washington", 2] <- median(los$dur)
names(med_los) <- c("Location", "Median Time to Permanency (days)")
med_los$Location <- factor(med_los$Location)
odbcCloseAll()
con <- odbcConnect("POC")
los <- sqlQuery(con, los_query)
med_los <- ddply(los, .(removal_county), summarize, med = median(dur))
med_los$removal_county <- as.character(med_los$removal_county)
med_los[med_los$removal_county == "Unknown", 1] <- "Washington"
med_los[med_los$removal_county == "Washington", 2] <- median(los$dur)
names(med_los) <- c("Location", "Median Time to Permanency (days)")
med_los$Location <- factor(med_los$Location)
med_los
setwd("S:/Data Portal/county_reports/gregor_test")
